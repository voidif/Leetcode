class Solution {
    public String decodeString(String s) {
        int index = 0;
        int n = s.length();
        Stack<String> charStack = new Stack<>();
        Stack<Integer> countStack = new Stack<>();
        String res = new String();
        while(index < n){
            char curChar = s.charAt(index);
            if(curChar <= '9' && curChar >= '0'){
                int count = curChar - '0';
                index ++;
                while(s.charAt(index) <= '9' && s.charAt(index) >= '0'){
                    count = count * 10 + (s.charAt(index) - '0');
                    index ++;
                }
                countStack.push(count);
            } else if(curChar == '['){
                charStack.push(res);
                res = "";
                index ++;
            } else if(curChar == ']'){
                StringBuilder tmp = new StringBuilder(charStack.pop());
                int count = countStack.pop();
                while(count > 0){
                    tmp.append(res);
                    count --;
                }
                res = tmp.toString();
                index ++;
            } else {
                res = res + curChar;
                index ++;
            }
        }
        return res;
    }
}


class Solution {
    int index = 0;
    public String decodeString(String s) {
        StringBuilder result = new StringBuilder();
        int repeatNum = 0;
        while (index < s.length()) {
            char currentChar = s.charAt(index);
            index++;
            if (currentChar == '[') {
                String decodeString = decodeString(s);
                repeatNum += repeatNum == 0 ? 1 : 0;
                appendNTime(result, repeatNum, decodeString);
                repeatNum = 0;
            } else if (currentChar == ']') {
                return result.toString();
            } else if (currentChar <= '9' && currentChar >= '0') {
                repeatNum = repeatNum * 10 + currentChar - '0';
            } else {
                result.append(currentChar);
            }
        }
        return result.toString();
    }
    
    private void appendNTime(StringBuilder s, int n, String appendContext) {
        for (int i = 0; i < n; i++) {
            s.append(appendContext);
        }
    }
}
