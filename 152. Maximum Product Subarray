class Solution {
    //dp on time and on space, the space can reduce to o1.
    //ref: https://blog.csdn.net/camellhf/article/details/71104508
    public int maxProduct(int[] nums) {
        int len = nums.length;
        //dp max[i] represent the max product of subarray [x, i] (0 <= x <= i)
        int[] max = new int[len];
        int[] min = new int[len];
        max[0] = nums[0];
        min[0] = nums[0];
        int res = max[0];
        for(int i = 1; i < len; i ++) {
            max[i] = Math.max(Math.max(max[i - 1] * nums[i], nums[i]), min[i - 1] * nums[i]);
            min[i] = Math.min(Math.min(max[i - 1] * nums[i], nums[i]), min[i - 1] * nums[i]);
            res = Math.max(max[i], res);
        }
        return res;
    }
}
