/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        Interval addon = newInterval;
        List<Interval> res = new ArrayList<>();
        for(Interval tmp : intervals){
            if(addon == null){
                Interval last = res.get(res.size() - 1);
                if(tmp.start <= last.end){
                    last.end = Math.max(last.end, tmp.end);
                } else {
                    res.add(tmp);
                }
            } else {
                if(tmp.end < addon.start){
                    res.add(tmp);
                } else if(tmp.start > addon.end){
                    res.add(addon);
                    res.add(tmp);
                    addon = null;
                } else {
                    res.add(new Interval(Math.min(tmp.start, addon.start), Math.max(tmp.end, addon.end)));
                    addon = null;
                }
            }
        }
        if(addon != null){
            res.add(addon);
        }
        return res;
    }
}


class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        LinkedList<int[]> result = new LinkedList<>();
        int insertIndex = insertAllIntervalsBeforeNewIntervals(result, intervals, newInterval);
        insertAtEnd(result, newInterval);
        insertFrom(result, intervals, insertIndex);
        return result.toArray(new int[result.size()][]);
    }
    
    private int insertAllIntervalsBeforeNewIntervals(List<int[]> result, int[][] intervals, int[] newInterval) {
        int index = 0;
        while (index < intervals.length && intervals[index][0] < newInterval[0]) {
            result.add(intervals[index]);
            index++;
        }
        return index;
    }
    
    private void insertAtEnd(LinkedList<int[]> intervals, int[] newInterval) {
        int[] lastInterval = intervals.size() == 0 ? null : intervals.getLast();
        if (lastInterval != null && isOverlap(lastInterval, newInterval)) {
            mergeInterval(lastInterval, newInterval);
        } else {
            intervals.add(newInterval);
        }
    }
    
    private boolean isOverlap(int[] interval1, int[] interval2) {
        return interval1[0] >= interval2[0] && interval1[0] <= interval2[1] ||
            interval2[0] >= interval1[0] && interval2[0] <= interval1[1];
    }
    
    private void mergeInterval(int[] interval, int[] newInterval) {
        interval[0] = Math.min(interval[0], newInterval[0]);
        interval[1] = Math.max(interval[1], newInterval[1]);
    }
    
    private void insertFrom(LinkedList<int[]> result, int[][] newIntervals, int begin) {
        for (int i = begin; i < newIntervals.length; i++) {
            insertAtEnd(result, newIntervals[i]);
        }
    }
}
