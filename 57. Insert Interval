/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        Interval addon = newInterval;
        List<Interval> res = new ArrayList<>();
        for(Interval tmp : intervals){
            if(addon == null){
                Interval last = res.get(res.size() - 1);
                if(tmp.start <= last.end){
                    last.end = Math.max(last.end, tmp.end);
                } else {
                    res.add(tmp);
                }
            } else {
                if(tmp.end < addon.start){
                    res.add(tmp);
                } else if(tmp.start > addon.end){
                    res.add(addon);
                    res.add(tmp);
                    addon = null;
                } else {
                    res.add(new Interval(Math.min(tmp.start, addon.start), Math.max(tmp.end, addon.end)));
                    addon = null;
                }
            }
        }
        if(addon != null){
            res.add(addon);
        }
        return res;
    }
}
