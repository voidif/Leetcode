class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        UnionFind unionFind = new UnionFind(edges.length + 1);
        for (int[] edge: edges) {
            if (!unionFind.quickUnionAndReturnIfUnioned(edge[0], edge[1])) {
                return edge;
            }
        }
        return null;
    }
}

class UnionFind {
    private int[] id;
    private int[] weights;
    
    public UnionFind(int n) {
        id = new int[n];
        weights = new int[n];
        for (int i = 0; i < n; i++) {
            id[i] = i;
            weights[i] = 1;
        }
    }
    
    public int find(int i) {
        while (id[i] != i) {
            id[i] = id[id[i]];
            i = id[i];
        }
        return i;
    }
    
    public boolean quickUnionAndReturnIfUnioned(int node1, int node2) {
        int id1 = find(node1);
        int id2 = find(node2);
        if (id1 == id2) {
            return false;
        } else {
            if (weights[id1] > weights[id2]) {
                id[id2] = id[id1];
                weights[id1] += weights[id2];
            } else {
                id[id1] = id[id2];
                weights[id2] += weights[id1];
            }
            return true;
        }
    }
}
