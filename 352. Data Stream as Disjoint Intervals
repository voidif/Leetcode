/*
Given a data stream input of non-negative integers a1, a2, ..., an, ..., summarize the numbers seen so far as a list of disjoint intervals.

For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:

[1, 1]
[1, 1], [3, 3]
[1, 1], [3, 3], [7, 7]
[1, 3], [7, 7]
[1, 3], [6, 7]
Follow up:
What if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?
*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */


class SummaryRanges {

    private TreeNode root;
    private int begin = Integer.MAX_VALUE;
    private int end = Integer.MIN_VALUE;
    /** Initialize your data structure here. */
    public SummaryRanges() {
        root = null;
    }
    
    public void addNum(int val) {
        if(root == null){
            root = new TreeNode(val);
        } else {
            insert(root, val);
        }
    }
    
    public List<Interval> getIntervals() {
        
        if(root == null){
            return null;
        }
        List<Interval> res = new LinkedList<>();
        iter(root, res);
        res.add(new Interval(begin, end));
        begin = Integer.MAX_VALUE;
        end = Integer.MIN_VALUE;
        
        return res;
    }
    public void iter(TreeNode root, List<Interval> res){
        if(root.left != null){
            iter(root.left, res);
        }
        if(begin == Integer.MAX_VALUE){
            begin = root.val;
            end = root.val;
        } else if(end + 1 == root.val){
            end = end + 1;
        } else {
            res.add(new Interval(begin, end));
            begin = root.val;
            end = begin;
        }
        if(root.right != null){
            iter(root.right, res);
        }
    }
    
    private void insert(TreeNode root, int val){
        if(root.val == val){return;}
        if(root.val < val){
            if(root.right != null){
                insert(root.right, val);
            } else {
                root.right = new TreeNode(val);
            }
        } else {
            if(root.left != null){
                insert(root.left, val);
            } else {
                root.left = new TreeNode(val);
            }
        }
    }
}
//Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * List<Interval> param_2 = obj.getIntervals();
 */
