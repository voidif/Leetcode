//very wrong and completed solution
class Solution {
    public int maxProfit(int[] prices) {
        ArrayList<Integer> recorder = new ArrayList<>();

        int n = prices.length;
        int first = 0;
        int last = 0;
        for(; last < n - 1; last ++){
            if(prices[last + 1] <= prices[last]){
                if(first != last){
                    recorder.add(first);
                    recorder.add(last);
                }
                first = last + 1;
            }
        }
        if(last > first){
            recorder.add(first);
            recorder.add(last);
        }
        if(recorder.size() == 0){
            return 0;
        }
        int[] table = new int[n];
        table[recorder.get(1)] = prices[recorder.get(1)] - prices[recorder.get(0)];
        table[recorder.get(1) - 1] = prices[recorder.get(1) - 1] - prices[recorder.get(0)];
        for(int i = 3; i < recorder.size(); i = i + 2){
            if(recorder.get(i - 1) == recorder.get(i - 2) + 1){
                table[recorder.get(i) - 1] = Math.max(table[recorder.get(i - 2)] + a(recorder.get(i - 1) + 1,  recorder.get(i) - 1, prices),
                        table[recorder.get(i - 2) - 1] + a(recorder.get(i - 1),  recorder.get(i) - 1, prices));
                table[recorder.get(i)] = Math.max(table[recorder.get(i - 2)] + a(recorder.get(i - 1) + 1,  recorder.get(i), prices),
                        table[recorder.get(i - 2) - 1] + a(recorder.get(i - 1),  recorder.get(i), prices));
            } else {
                table[recorder.get(i) - 1] = table[recorder.get(i - 2)] + a(recorder.get(i - 1),  recorder.get(i) - 1, prices);
                table[recorder.get(i)] = table[recorder.get(i - 2)] + a(recorder.get(i - 1),  recorder.get(i), prices);
            }
        }
        return table[recorder.get(recorder.size() - 1)];


    }

    public int a(int begin, int end, int[] prices){
        if(begin >= end){
            return 0;
        } else {
            return prices[end] - prices[begin];
        }
    }

}
//
class Solution {
    public int maxProfit(int[] prices) {

        int n = prices.length;
        if(n == 0){
            return 0;
        }
        int[] notHold = new int[n];
        int[] hold = new int[n];
        int[] justSell = new int[n];
        hold[0] = - prices[0];
        for(int i = 1; i < n; i++){
            notHold[i] = Math.max(notHold[i - 1], justSell[i - 1]);
            hold[i] = Math.max(notHold[i - 1] - prices[i], hold[i - 1]);
            justSell[i] = hold[i - 1] + prices[i];
        }
        return Math.max(notHold[n - 1], justSell[n - 1]);
    }

}
