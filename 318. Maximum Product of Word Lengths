/*
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.
Example 1:
Input: ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16 
Explanation: The two words can be "abcw", "xtfn".
Example 2:
Input: ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4 
Explanation: The two words can be "ab", "cd".
Example 3:
Input: ["a","aa","aaa","aaaa"]
Output: 0 
Explanation: No such pair of words.
*/

//solution 1 without memorization, 230 ms
class Solution {
   public int maxProduct(String[] words) {
      int res = 0;
      Arrays.sort(words, new StringComparator());
      for(int i = 0; i < words.length; i ++){
         for(int j = i + 1; j < words.length; j ++){
            if(! isShareCommonLetters(words[i], words[j])){
               res = res > words[i].length() * words[j].length() ? res : words[i].length() * words[j].length();
            }
         }
      }
      return res;
   }

   public boolean isShareCommonLetters(String a, String b){
      boolean[] letterArray = new boolean[26];
      for(char tmp : a.toCharArray()){
         letterArray[tmp - 'a'] = true;
      }
      for(char tmp : b.toCharArray()){
         if(letterArray[tmp - 'a'] == true){
            return true;
         }
      }
      return false;
   }
}

class StringComparator implements Comparator<String> {
   @Override
   public int compare(String o1, String o2) {
      return o2.length() - o1.length();
   }
}
//solution 2 with memorize, 47 ms
class Solution {
    private boolean[][] letterArray;
    
    public int maxProduct(String[] words) {
        letterArray = new boolean[words.length][26];
       for(int i = 0; i < words.length; i ++){
           for(char tmp : words[i].toCharArray()){
               letterArray[i][tmp - 'a'] = true; 
           }
       }
       int res = 0;
       for(int i = 0; i < words.length; i ++){
           for(int j = i + 1; j < words.length; j ++){
               if(! isShareCommonLetters(i, j)){
                   res = res > words[i].length() * words[j].length() ? res : words[i].length() * words[j].length();
               }
           }
       }
       return res;
    }

    public boolean isShareCommonLetters(int a, int b){
       for(int i = 0; i < 26; i ++){
           if(letterArray[a][i] && letterArray[b][i]){
               return true;
           }
       }
       return false;
    }
}

