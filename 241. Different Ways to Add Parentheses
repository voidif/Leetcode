/*
Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.

Example 1:

Input: "2-1-1"
Output: [0, 2]
Explanation: 
((2-1)-1) = 0 
(2-(1-1)) = 2
Example 2:

Input: "2*3-4*5"
Output: [-34, -14, -10, -10, 10]
Explanation: 
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10
*/

//way 1: recursive without memorize
class Solution {
    //private LinkedList<>[][] mem = new LinkedList<>[inputArray.length][inputArray.length];

    public List<Integer> diffWaysToCompute(String input) {
        return helper(input, 0, input.length());

    }

    public List<Integer> helper(String input, int begin, int end){
        char[] inputArray = input.toCharArray();
        List<Integer> res = new LinkedList<Integer>();
        List<Integer> res1 = new LinkedList<Integer>();
        List<Integer> res2 = new LinkedList<Integer>();
        for(int i = begin; i < end; i ++){
            if(inputArray[i] == '+' || inputArray[i] == '-' || inputArray[i] == '*'){
                res1 = helper(input, begin, i);
                res2 = helper(input, i + 1, end);
            }
            for(int tmp1 : res1){
                for(int tmp2 : res2){
                    switch(inputArray[i]){
                        case '+' : res.add(tmp1 + tmp2); break;
                        case '-' : res.add(tmp1 - tmp2); break;
                        case '*' : res.add(tmp1 * tmp2); break;
                    }
                }
            }
        }
        if(res.size() == 0){
            res.add(Integer.parseInt(new String(inputArray, begin, end - begin)));
        }
        return res;
    }
}

//solution with memorize
class Solution {
    private List[][] memArray;

    public List<Integer> diffWaysToCompute(String input) {
        char[] inputArray = input.toCharArray();
        memArray = new LinkedList[input.length()][input.length()];
        return helper(inputArray, 0, input.length());
    }

    public List<Integer> helper(char[] inputArray, int begin, int end){
        List<Integer> res = new LinkedList<Integer>();
        List<Integer> res1 = new LinkedList<Integer>();
        List<Integer> res2 = new LinkedList<Integer>();
        for(int i = begin; i < end; i ++){
            if(inputArray[i] == '+' || inputArray[i] == '-' || inputArray[i] == '*'){
                if(memArray[begin][i - 1] != null){
                    res1 = memArray[begin][i - 1];
                } else {
                    res1 = helper(inputArray, begin, i);
                    memArray[begin][i - 1] = res1;
                }
                if(memArray[i + 1][end - 1] != null){
                    res2 = memArray[i + 1][end - 1];
                } else {
                    res2 = helper(inputArray, i + 1, end);
                    memArray[i + 1][end - 1] = res2;
                }
                for(int tmp1 : res1){
                    for(int tmp2 : res2){
                        switch(inputArray[i]){
                            case '+' : res.add(tmp1 + tmp2); break;
                            case '-' : res.add(tmp1 - tmp2); break;
                            case '*' : res.add(tmp1 * tmp2); break;
                        }
                    }
                }
            }
            
        }
        if(res.size() == 0){
            res.add(Integer.parseInt(new String(inputArray, begin, end - begin)));
        }
        memArray[begin][end - 1] = res;
        return res;
    }
}
