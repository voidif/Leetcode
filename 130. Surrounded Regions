class Solution {
    public void solve(char[][] board) {
        //if size is smaller than 2 x 2
        if(board.length <= 2 || board[0].length <= 2){return;}
        int m = board.length;
        int n = board[0].length;
        //a table recorder
        //0 represents flip
        //1 represents keep
        int[][] table = new int[m][n];
        //for every O in border, try dfs from that pointe
        for(int i = 0; i < n; i ++){
            if(board[0][i] == 'O'){
                table[0][i] = 1;
                dfs(board, table, 0, i);
            }
            if(board[m - 1][i] == 'O'){
                table[m - 1][i] = 1;
                dfs(board, table, m - 1, i);
            }
        }
        for(int i = 1; i < m - 1; i ++){
            if(board[i][0] == 'O'){
                table[i][0] = 1;
                dfs(board, table, i, 0);
            }
            if(board[i][n - 1] == 'O'){
                table[i][n - 1] = 1;
                dfs(board, table, i, n - 1);
            }
        }
        //flip
        for(int i = 0; i < m; i ++){
            for(int j = 0; j < n; j ++){
                if(board[i][j] == 'O' && table[i][j] == 0){
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    //given a alive node, find all alive node from 4 directions.
    public void dfs(char[][] board, int[][] table, int x, int y){
        int m = board.length;
        int n = board[0].length;
        //right
        if(y + 1 < n && board[x][y + 1] == 'O' && table[x][y + 1] == 0){
            table[x][y + 1] = 1;
            dfs(board, table, x, y + 1);
        }
        //down
        if(x + 1 < m && board[x + 1][y] == 'O' && table[x + 1][y] == 0){
            table[x + 1][y] = 1;
            dfs(board, table, x + 1, y);
        }
        //left
        if(y - 1 >= 0 && board[x][y - 1] == 'O' && table[x][y - 1] == 0){
            table[x][y - 1] = 1;
            dfs(board, table, x, y - 1);
        }
        //up
        if(x - 1 >= 0 && board[x - 1][y] == 'O' && table[x - 1][y] == 0){
            table[x - 1][y] = 1;
            dfs(board, table, x - 1, y);
        }
    }
}
