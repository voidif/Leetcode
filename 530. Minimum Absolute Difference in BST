/*
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
Note: There are at least two nodes in this BST.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int min = Integer.MAX_VALUE;
    public int getMinimumDifference(TreeNode root) {
        ArrayList<Integer> nums = new ArrayList<Integer>();
        helper (root, nums);
        return min;
    }
    public void helper(TreeNode root, ArrayList<Integer> nums){
        if(root.left != null){
            helper(root.left, nums);
        } 
        nums.add(root.val);
        if(nums.size() > 1){
            min = Math.min(min, Math.abs(nums.get(nums.size() - 1) - nums.get(nums.size() - 2)));
        }
        if(root.right != null){
            helper(root.right, nums);
        }
    }
}
