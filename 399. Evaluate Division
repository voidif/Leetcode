class Solution {
    private Map<String, Map<String, Double>> map;
    public double[] calcEquation(String[][] equations, double[] values, String[][] queries) {
        map = new HashMap<String, Map<String, Double>>();
        initialize(equations, values);
        double[] res = new double[queries.length];
        for(int i = 0; i < queries.length; i ++){
            res[i] = query(queries[i][0], queries[i][1], new HashSet<String>(), 1.0);
        }
        return res;
    }
    
    public void initialize(String[][] equations, double[] values){
        for(int i = 0; i < equations.length; i ++){
            insert(equations[i][0], equations[i][1], values[i]);
            insert(equations[i][1], equations[i][0], 1 / values[i]);
        }
    }
    
    public void insert(String node, String neiborNode, double edge){
        Map<String, Double> tmp = map.getOrDefault(node, new HashMap<String, Double>());
        tmp.put(neiborNode, edge);
        map.put(node, tmp);
    }
    
    public double query(String node, String neiborNode, Set<String> traveledNodes, double val){
        if(traveledNodes.contains(node)){
            return -1.0;
        }
        if(node.equals(neiborNode)){
            return 1.0;
        }
        
        Map<String, Double> tmp = map.get(node);
        double res = - 1.0;
        traveledNodes.add(node);
        for(String curNode : tmp.keySet()){
            res = query(curNode, neiborNode, traveledNodes, val * tmp.get(curNode));
            if(res != -1.0){
                break;
            }
        }
        traveledNodes.remove(node);
        return res;
    }
    
    
}
