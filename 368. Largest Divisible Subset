class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        if(nums.length == 0){
            return new ArrayList();
        }
        Arrays.sort(nums);
        int[] res = new int[nums.length];
        int[] table = new int[nums.length];
        Arrays.fill(table, 1);
        int max = 0;
        for(int i = 0; i < nums.length; i ++){
            res[i] = i;
            //table[j] = math.max{table[0 - j - 1]} for nums[j] % nums[x] == 0
            //search from j - 1 to 0, if reminding unserach index x < curmax; stop search
            int left = i;
            for(int j = 1; j <= left; j ++){
                if(nums[i] % nums[i - j] == 0){
                    if(table[i - j] + 1 > table[i]){
                        res[i] = i - j;
                        table[i] = table[i - j] + 1;
                        left = i - table[i] + 1;
                        if(table[i] > table[max]){
                            max = i;
                        }
                    }
                }
            }
        }
        LinkedList<Integer> result = new LinkedList<>();
        while(max != res[max]){
            result.addFirst(nums[max]);
            max = res[max];
        }
        result.addFirst(nums[max]);
        return result;
    }
}
