class Solution {
    //build a graph then do topological search
    public String alienOrder(String[] words) {
        //build a graph based on adjacency list
        Map<Character, List<Character>> adjList = new HashMap<>();
        Map<Character, Integer> inDegreeCount = new HashMap<>();
        //-1 means no such node
        for(String word : words) {
            for(char character : word.toCharArray()) {
                inDegreeCount.putIfAbsent(character, 0);
            }
            
        }
        
        for(int i = 0; i < words.length - 1; i ++) {
            int j = 0;
            while(j < words[i].length() && j < words[i + 1].length()) {
                if(words[i].charAt(j) != words[i + 1].charAt(j)) {
                    List<Character> list = adjList.getOrDefault(words[i].charAt(j), new ArrayList<Character>());
                    list.add(words[i + 1].charAt(j));
                    
                    inDegreeCount.put(words[i + 1].charAt(j), inDegreeCount.get(words[i + 1].charAt(j)) + 1);
                    adjList.putIfAbsent(words[i].charAt(j), list);
                    break;
                }
                j ++;
            }
        }
        StringBuilder res = new StringBuilder();
        Stack<Character> zeroStack = new Stack<>();
        //do topological sort
        while(inDegreeCount.size() != 0) {
            //get a node without ancester
            for(char tmp : inDegreeCount.keySet()) {
                if(inDegreeCount.get(tmp) == 0) {
                    zeroStack.push(tmp);
                }
            }
            //remove that node, add to result, and remove all edge it has
            if(zeroStack.size() == 0) {
                return "";
            } else {
                char curNode = zeroStack.pop();
                inDegreeCount.remove(curNode);
                res.append(curNode);
                if(adjList.containsKey(curNode)) {
                    List<Character> list = adjList.remove(curNode);
                    for(char tmp: list) {
                        int inDegree = inDegreeCount.get(tmp);
                        if(inDegree == 1) {
                            zeroStack.push(tmp);
                        }
                        inDegreeCount.put(tmp, inDegree - 1);
                    }
                }
            }
            
            
        }
        return res.toString();
    }
    
    
}
