class LRUCache {
    //using a hashmap and a doubly linked list to implement this function
    //the head of the linked list represents the oldest data, tail represents newest
    private Map<Integer, DoublyLinkedList> map = new HashMap<>();;
    DoublyLinkedList head = null;
    DoublyLinkedList tail = null;
    int capacity;
    int size = 0;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
    }
    
    public int get(int key) {
        //System.out.println(key);
        DoublyLinkedList node = map.get(key);
        if(node == null){
            return -1;
        } else if(tail != node){
            //case 3, move it to tail
            delete(node);
            tail.next = node;
            node.pre = tail;
            tail = node;
        }
        return node.val;
    }
    
    //5 different cases
    //1. empty list
    //2. existed key located at tail
    //3. existed key located not at tail
    //4. new key with not full list
    //5. new key with full list
    public void put(int key, int value) {
        DoublyLinkedList node = map.get(key);
        //case no.1
        if(size == 0){
            DoublyLinkedList newNode = new DoublyLinkedList(key, value);
            map.put(key, newNode);
            head = newNode;
            tail = newNode;
            size ++;
        } 
        //case 2 and 3
        else if(node != null){
            //case 2, update linked list
            node.val = value;
            //case 3, move it to tail
            if(tail != node){
                delete(node);
                tail.next = node;
                node.pre = tail;
                tail = node;
            }
        } 
        //case 4 and 5
        else {
            //case 4, add node to the tail
            DoublyLinkedList newNode = new DoublyLinkedList(key, value);
            map.put(key, newNode);
            tail.next = newNode;
            newNode.pre = tail;
            tail = newNode;
            size ++;
            //case 5, delete head
            if(size > capacity) {
                map.remove(head.key);
                delete(head);
                size --;
            }
        }
    }
    
    //delete the node from linkedlist(not at tail)
    private void delete(DoublyLinkedList node){
        if(this.head == node){
            head = node.next;
            head.pre = null;
            node.next = null;
        } else {
            DoublyLinkedList pre = node.pre;
            DoublyLinkedList next = node.next;
            pre.next = next;
            next.pre = pre;
            node.next = null;
            node.pre = null;
        }
    }
}

class DoublyLinkedList {
    public int val;
    public int key;
    public DoublyLinkedList next;
    public DoublyLinkedList pre;
    public DoublyLinkedList(int key, int val) {
        this.key = key;
        this.val = val;
        next = null;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
