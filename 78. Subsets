/*
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/
class Solution {
    private List<List<Integer>> res = new LinkedList<>();
    public List<List<Integer>> subsets(int[] nums) {
        List<Integer> tmpRes = new LinkedList<>();
        backtracking(tmpRes, 0, nums);
        res.add(new LinkedList<>());
        return res;
    }
    public void backtracking(List<Integer> tmpRes, int k, int[] nums){
        if(k == nums.length){
            return;
        }
        for(int i = k; i < nums.length; i ++){
            tmpRes.add(nums[i]);
            res.add(new LinkedList<>(tmpRes));
            backtracking(tmpRes, i + 1, nums);
            tmpRes.remove(tmpRes.size() - 1);
        }
    }
}
