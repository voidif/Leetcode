//runtime cost: 6 ms to 200 ms
class Solution {
    
    public List<Integer> countSmaller(int[] nums) {
        int[] indexList = new int[nums.length];
        int[] countList = new int[nums.length];
        for(int i = 0; i < nums.length; i ++){
            indexList[i] = i;
        }
        mergeSort(nums, 0, nums.length - 1, indexList, countList);
        ArrayList<Integer> res = new ArrayList<>();
        for(int tmp : countList){res.add(tmp);}

        return res;
    }
    
    
    //end included
    public void mergeSort(int[] nums, int begin, int end, int[] indexList, int[] countList){
        if(begin >= end){
            return;
        }
        int mid = (begin + end) / 2;
        mergeSort(nums, begin, mid, indexList, countList);
        mergeSort(nums, mid + 1, end, indexList, countList);
        int index = 0;
        int i = begin;
        int j = mid + 1;
        int count = 0;
        //warning: this copy all length of indexList is O(n), will cost a lot of time
        //recomand change:
        //        for(int k = begin; k <= end; k ++){
        //          helper[k] = indexList[k];
        //        }
        int[] helper = Arrays.copyOf(indexList, indexList.length);
        while(i <= mid && j <= end){
            if(nums[helper[i]] <= nums[helper[j]]){
                indexList[begin + index] = helper[i];
                countList[indexList[begin + index]] += count;
                index ++;
                i ++;
            } else {
                count ++;
                indexList[begin + index] = helper[j];
                index ++;
                j ++;
            }
        }
        while(i <= mid){
            indexList[begin + index] = helper[i];
            countList[indexList[begin + index]] += count;
            i ++;
            index ++;
        }
    }
}

//nlogn to n2
BST
class Solution {
    public List<Integer> countSmaller(int[] nums) {
        LinkedList<Integer> smallerCount = new LinkedList<>();
        BST tree = new BST();
        for(int i = nums.length - 1; i >= 0; i --) {
            smallerCount.addFirst(tree.insert(nums[i]));
        }
        return smallerCount;
    }
}


class BST {
    public BSTNode rootNode = null;
    
    public int insert(int val) {
        if (rootNode == null) {
            rootNode = new BSTNode(val, 0);
            return 0;
        } else {
            BSTNode newNode = new BSTNode(val, 0);
            return insertAtNode(rootNode, newNode, 0);
        }
    }
    
    private int insertAtNode(BSTNode parentNode, BSTNode newNode, int smallCount) {
        if (newNode.val < parentNode.val) {
            return insertLeft(parentNode, newNode, smallCount);
        } else {
            return insertRight(parentNode, newNode, smallCount);
        }
    }
    
    private int insertLeft(BSTNode parentNode, BSTNode newNode, int smallCount) {
        parentNode.smallerChildCount ++;
        if (parentNode.left == null) {
            parentNode.left = newNode;
            return smallCount;
        } else {
            return insertAtNode(parentNode.left, newNode, smallCount);
        }
    }
    
    private int insertRight(BSTNode parentNode, BSTNode newNode, int smallCount) {
        if (parentNode.val < newNode.val) {
           smallCount += parentNode.smallerChildCount + 1;
        } else {
            smallCount += parentNode.smallerChildCount;
        }
        if (parentNode.right == null) {
            parentNode.right = newNode;
            return smallCount;
        } else {
            return insertAtNode(parentNode.right, newNode, smallCount);
        }
    }
}

    class BSTNode {
        public int val;
        public int smallerChildCount;
        
        public BSTNode left = null;
        public BSTNode right = null;
        
        public BSTNode(int val, int smallerChildCount) {
            this.val = val;
            this.smallerChildCount = smallerChildCount;
        }
    }
