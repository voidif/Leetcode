/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.
Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 //old solution, list all node in tree and find k
class Solution {
   public int kthSmallest(TreeNode root, int k) {
      ArrayList<Integer> array = new ArrayList<>();
      iter(root, array);
      return array.get(k - 1);
   }
   public void iter(TreeNode root, ArrayList<Integer> array){
      if(root.left != null){
         iter(root.left, array);
      }
      array.add(root.val);
      if(root.right != null){
         iter(root.right, array);
      }
   }
}
//new solution, only find first k node
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int res = 0;;
    private int curNum = 1;
   public int kthSmallest(TreeNode root, int k) {
      iter(root, k);
      return res;
   }
   public void iter(TreeNode root, int k){
       if(curNum > k){
            return;
       }
      if(root.left != null){
         iter(root.left, k);
      }
       if(curNum == k){
           res = root.val;
       }
       curNum ++;
      if(root.right != null){
         iter(root.right, k);
      }
   }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int count;
    int val;
    public int kthSmallest(TreeNode root, int k) {
        count = k;
        inorder(root);
        return val;
    }
    
    public void inorder(TreeNode root) {
        if(count <= 0) {
            return;
        }
        if(root.left != null) {
            inorder(root.left);
        } 
        if(count == 1) {
            val = root.val;
        }
        count --;
        if(root.right != null) {
            inorder(root.right);
        }
        
    }
}
