/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.
Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
   public int kthSmallest(TreeNode root, int k) {
      ArrayList<Integer> array = new ArrayList<>();
      iter(root, array);
      return array.get(k - 1);
   }
   public void iter(TreeNode root, ArrayList<Integer> array){
      if(root.left != null){
         iter(root.left, array);
      }
      array.add(root.val);
      if(root.right != null){
         iter(root.right, array);
      }
   }
}
