class Solution {
    public List<int[]> pacificAtlantic(int[][] matrix) {
        if(matrix.length == 0){
            return new ArrayList();
        }
        int[][] visitedP = new int[matrix.length][matrix[0].length];
        int[][] visitedA = new int[matrix.length][matrix[0].length];
        int[][] pacific = new int[matrix.length][matrix[0].length];
        int[][] atlantic = new int[matrix.length][matrix[0].length];
        for(int i = 0; i < matrix[0].length; i ++){
            visitedP[0][i] = 1;
            pacific[0][i] = 1;
            atlantic[matrix.length - 1][i] = 1;
            visitedA[matrix.length - 1][i] = 1;
        }
        for(int i = 0; i < matrix.length; i ++){
            visitedP[i][0] = 1;
            pacific[i][0] = 1;
            atlantic[i][matrix[0].length - 1] = 1;
            visitedA[i][matrix[0].length - 1] = 1;
        }
        for(int i = 0; i < matrix.length; i ++){
            for(int j = 0; j < matrix[0].length; j ++){
                dfs(matrix, visitedP, pacific, i, j);
                dfs(matrix, visitedA, atlantic, i, j);
            }
        }
        List<int[]> res = new ArrayList<>();
        for(int i = 0; i < matrix.length; i ++){
            for(int j = 0; j < matrix[0].length; j ++){
                if(pacific[i][j] == 1 && atlantic[i][j] == 1){
                    res.add(new int[]{i, j});
                }
            }
        }
        return res;
    }
    
    public void dfs(int[][] matrix, int[][] visited, int[][] ocean, int x, int y){
        //left x - 1 && not visited && not lower && current to ocean
        if(x > 0 && visited[x - 1][y] == 0 && matrix[x - 1][y] >= matrix[x][y] && ocean[x][y] == 1){
            visited[x - 1][y] = 1;
            ocean[x - 1][y] = 1;
            dfs(matrix, visited, ocean, x - 1, y);
        }
        //right x + 1
        if(x < matrix.length - 1 && visited[x + 1][y] == 0 && matrix[x + 1][y] >= matrix[x][y] && ocean[x][y] == 1){
            visited[x + 1][y] = 1;
            ocean[x + 1][y] = 1;
            dfs(matrix, visited, ocean, x + 1, y);
        }
        //up y - 1
        if(y > 0 && visited[x][y - 1] == 0 && matrix[x][y - 1] >= matrix[x][y] && ocean[x][y] == 1){
            visited[x][y - 1] = 1;
            ocean[x][y - 1] = 1;
            dfs(matrix, visited, ocean, x, y - 1);
        }
        //down y + 1
        if(y < matrix[0].length - 1 && visited[x][y + 1] == 0 && matrix[x][y + 1] >= matrix[x][y] && ocean[x][y] == 1){
            visited[x][y + 1] = 1;
            ocean[x][y + 1] = 1;
            dfs(matrix, visited, ocean, x, y + 1);
        }
        
    }
}
