class Solution {
    // run time :pow(k, n + 1);
    private String result = "";
    private Set<String> visitedPassword = new HashSet<>();
    private int pwdCount = 0;
    
    public String crackSafe(int n, int k) {
        pwdCount = (int)Math.pow(k, n);
        StringBuilder currentString = new StringBuilder();
        for (int i = 0; i < n; i++) {
            currentString.append('0');
        }
        visitedPassword.add(currentString.toString());
        dfs(currentString, n, k);
        return result;
    }
    
    private void dfs(StringBuilder currentString, int n, int k) {
        if (visitedPassword.size() == pwdCount) {
            result = currentString.toString();
        } else {
            for (int i = 0; i < k && result.length() == 0; i++) {
                int len = currentString.length();
                String duplicatedChar = currentString.substring(len - n + 1, len);
                char newEnd = (char)('0' + i);
                String newPwd = duplicatedChar + newEnd;
                if (!visitedPassword.contains(newPwd)) {
                    currentString.append(newEnd);
                    visitedPassword.add(newPwd);
                    dfs(currentString, n, k);
                    if (result.length() == 0) {
                        currentString.deleteCharAt(len);
                        visitedPassword.remove(newPwd);
                    }
                }
            }
        }
    }
}
