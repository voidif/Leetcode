class Solution {
    public List<String> letterCombinations(String digits) {
        if(digits.length() == 0){
            return new ArrayList();
        }
        char[][] mapList = new char[][]{{}, {'a', 'b', 'c'}, {'d', 'e', 'f'}, {'g', 'h', 'i'},
                                        {'j', 'k', 'l'}, {'m', 'n', 'o'}, {'p', 'q', 'r', 's'}, 
                                        {'t', 'u', 'v'}, {'w', 'x', 'y', 'z'}};
        char[] digitsChar = digits.toCharArray();
        List<String> res = new ArrayList<>();
        StringBuilder tmpRes = new StringBuilder();
        backtracking(res, tmpRes, mapList, 0, digitsChar);
        return res;
    }
    
    public void backtracking(List<String> res, StringBuilder tmpRes, char[][] mapList, int curCount, char[] digitsChar){
        while(curCount < digitsChar.length && digitsChar[curCount] == '1'){
            curCount ++;
        }
        if(curCount >= digitsChar.length){
            res.add(tmpRes.toString());
            return;
        }
        for(int i = 0; i < mapList[digitsChar[curCount] - '1'].length; i ++){
            tmpRes.append(mapList[digitsChar[curCount] - '1'][i]);
            backtracking(res, tmpRes, mapList, curCount + 1, digitsChar);
            tmpRes.deleteCharAt(tmpRes.length() - 1);
        }
    }
}
