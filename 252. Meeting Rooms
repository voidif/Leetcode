/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    //quick sort
    public boolean canAttendMeetings(Interval[] intervals) {
        quickSort(intervals, 0, intervals.length - 1);
        int end = Integer.MIN_VALUE;
        for(Interval interval : intervals) {
            // System.out.println(interval.start + " " + interval.end);
            if(interval.start >= end) {
                end = interval.end;
            } else {
                return false;
            }
        }
        return true;
    }
    
    //[start, end]
    public void quickSort(Interval[] intervals, int begin, int end) {
        if(begin >= end) {
            return;
        }
        Interval pivot = intervals[begin];
        int l = begin;
        int r = end;
        while(l < r) {
            //right pointer moving
            while(l < r && intervals[r].start >= pivot.start) {r --;}
            //left pointer moving
            while(l < r && intervals[l].start <= pivot.start) {l ++;}
            //swap
            if(l < r) {
                Interval tmp = intervals[l];
                intervals[l] = intervals[r];
                intervals[r] = tmp;
            } else if(r != begin){
                Interval tmp = intervals[begin];
                intervals[begin] = intervals[r];
                intervals[r] = tmp;
            }
            
        }
        quickSort(intervals, begin, l - 1);
        quickSort(intervals, l + 1, end);
    }
}
