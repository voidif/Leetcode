/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null){
            return;
        }
        link(root, null);
    }
    
    public void link(TreeLinkNode root, TreeLinkNode linkPoint){
        if(root.left == null && root.right == null){
            return;
        }
        TreeLinkNode nextLinkPoint = null;
        TreeLinkNode tmpNext = linkPoint;
        while(tmpNext != null){
            if(tmpNext.left != null){
                nextLinkPoint = tmpNext.left;
                break;
            } else if(tmpNext.right != null){
                nextLinkPoint = tmpNext.right;
                break;
            } 
            tmpNext = tmpNext.next;
        } 
        if(root.right != null){
            link(root.right, nextLinkPoint);
            root.right.next = linkPoint;
            if(root.left != null){
                TreeLinkNode rightLinkPoint = null;
                if(root.right.left != null){
                    rightLinkPoint = root.right.left;
                } else if(root.right.right != null){
                    rightLinkPoint = root.right.right;
                } else {
                    rightLinkPoint = nextLinkPoint;
                }
                
                root.left.next = root.right;
                link(root.left, rightLinkPoint);
            }
        } else {
            root.left.next = linkPoint;
            link(root.left, nextLinkPoint);
        }
    }
}


/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        if (root != null) {
            return connect(root, null);
        } else {
            return null;
        }
        
    }
    
    private Node connect(Node leftNode, Node rightNode) {
        if (leftNode != null && leftNode.next == null) {
            leftNode.next = rightNode;
            connect(getLastNodeUnderCurrentNode(leftNode), getFirstNode(rightNode));
            connect(leftNode.left, leftNode.right);
        }
        return leftNode;
    }
    
    private Node getLastNodeUnderCurrentNode(Node root) {
        if (root != null) {
            return root.right != null ? root.right : root.left;
        } else {
            return null;
        }
    }
    
    private Node getFirstNodeUnderCurrentNode(Node root) {
        if (root != null) {
            return root.left != null ? root.left : root.right;
        } else {
            return null;
        }
    }
    
    private Node getFirstNode (Node root) {
        Node firstNode = getFirstNodeUnderCurrentNode(root);
        while (firstNode == null && root != null) {
            root = root.next;
            firstNode = getFirstNodeUnderCurrentNode(root);
        }
        return firstNode;
    }
}
