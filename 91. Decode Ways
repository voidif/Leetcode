class Solution {
    //dp o(n)
    public int numDecodings(String s) {
        //corner case
        if(s == null || s.length() == 0 || Integer.parseInt(s.substring(0, 1)) == 0){
            return 0;
        }
        //table to store all possible decode way from 0 to current index
        int[] table = new int[s.length() + 1];
        table[0] = 1;
        table[1] = 1;
        //if s's length is 1, we got the result
        if(s.length() == 1){
            return table[1];
        }
        //calculate first two index
        //iterate all index
        for(int i = 1; i < s.length(); i ++){
            //if the previous number is not 0, and current and previous numbers 
            //can form number smaller than 26, then we can decode it
            if(Integer.parseInt(s.substring(i - 1, i)) > 0 && 
               Integer.parseInt(s.substring(i - 1, i + 1)) <= 26){
                table[i + 1] = table[i + 1] + table[i - 1];
            }
            // System.out.println(table[i + 1]);
            //if current number number larger than 0, 
            //we can decode current number as a letter
            if(Integer.parseInt(s.substring(i , i + 1)) > 0){
                table[i + 1] = table[i + 1] + table[i];
            }
            // System.out.println(table[i]);
            // System.out.println(table[i + 1]);
            
        }
        return table[table.length - 1];
    }
}
