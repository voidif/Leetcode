class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        if(matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        int max = Integer.MIN_VALUE;
        int m = matrix.length;
        int n = matrix[0].length;
        if(m > n){
            int[] array = new int[m];
            for(int i = 0; i < n; i ++){
                Arrays.fill(array, 0);
                for(int j = i; j < n; j ++){
                    for(int z = 0; z < m; z ++){
                        array[z] += matrix[z][j];
                    }
                    max = Math.max(max, getMaxSubarray(array, k));
                    if(max == k){
                        return k;
                    }
                }
            }
        } else {
            int[] array = new int[n];
            for(int i = 0; i < m; i ++){
                Arrays.fill(array, 0);
                for(int j = i; j < m; j ++){
                    for(int z = 0; z < n; z ++){
                        array[z] += matrix[j][z];
                    }
                    max = Math.max(max, getMaxSubarray(array, k));
                    if(max == k){
                        return k;
                    }
                }
            }
        }
        return max;
        
    }
    
    public int getMaxSubarray(int[] array, int k) {
        // int curMax = 0;
        // int max = Integer.MIN_VALUE;
        // for (int i = 0; i < array.length; i++) {
        //     curMax = Math.max(curMax + array[i], array[i]);
        //     max = Math.max(max, curMax);
        // }
        // if (max <= k) {
        //     return max;
        // }
        
        TreeSet<Integer> s = new TreeSet<>();
        s.add(0);
        int r = Integer.MIN_VALUE;
        int sum = 0;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
            Integer c = s.ceiling(sum - k);
            if (c != null) {
                r = Math.max(r, sum - c);
            }
            s.add(sum);
        }
        return r;
    }
}
