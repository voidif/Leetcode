//n^2 solution
class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] table = new int[nums.length];
        Arrays.fill(table, 1);
        for(int i = 1; i < nums.length; i ++){
            for(int j = 0;j < i; j ++){
                if(nums[j] < nums[i]){
                    table[i] = Math.max(table[i], table[j] + 1);
                }
            }
        }
        int res = 0;
        for(int tmp : table){
            res = Math.max(res, tmp);
        }
        return res;
    }
}

//nlogn solution
class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        int[] table = new int[nums.length];
        table[0] = nums[0];
        int index = 0;
        for(int i = 1; i < nums.length; i ++){
            if(table[index] < nums[i]){
                table[index + 1] = nums[i];
                index ++;
            } else {
                int l = 0;
                int r = index;
                while(l < r){
                    int mid = (l + r) / 2;
                    if(table[mid] < nums[i]){
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                if(table[l] >= nums[i]){
                    table[l] = nums[i];
                    index = Math.max(index, l);
                } else {
                    table[l + 1] = nums[i];
                    index = Math.max(index, l + 1);
                }
                
            }
        }
        return index + 1;
    }
    
}
