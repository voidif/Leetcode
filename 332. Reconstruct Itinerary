//The graph must be Eulerian since we know that a Eulerian path exists.
//we use Hierholzer's algorithm
//Everytime we travel a edge, delete it.
//if there is no more edges to go in a node, add that node to the first of result
//so the node that has odd edge will be add to the end of result, that is exactly we need
//use priorityqueue to ensure the lexical order.

class Solution {
    private Map<String, PriorityQueue<String>> map;
    public List<String> findItinerary(String[][] tickets) {
        map = new HashMap<>();
        for(String[] tmp : tickets){
            map.putIfAbsent(tmp[0], new PriorityQueue<String>());
            PriorityQueue tmpList = map.get(tmp[0]);
            tmpList.add(tmp[1]);
        }
        //System.out.println(map.size());
        LinkedList<String> result = new LinkedList<>();
        String cur = "JFK";
        getPath(result, cur);
        return result;
    }
    public void getPath(LinkedList<String> res, String cur) {
        PriorityQueue<String> tmpList = map.get(cur);
        if(tmpList != null && tmpList.size() != 0){
            while(tmpList.size() > 0){
                String next = tmpList.poll();
                getPath(res, next);
            }
        }
        res.addFirst(cur);
    }
    
}
