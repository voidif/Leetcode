//backtracking solution that skip duplicated numbers
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        res.add(new ArrayList<Integer>());
        List<Integer> tmpRes = new ArrayList<>();
        helper(res, tmpRes, 0, nums);
        return res;
    }
    
    public void helper(List<List<Integer>> res, List<Integer> tmpRes, int index, int[] nums){
        if(index == nums.length){
            return;
        }
        for(int i = index; i < nums.length; i ++){
            tmpRes.add(nums[i]);
            res.add(new ArrayList(tmpRes));
            helper(res, tmpRes, i + 1, nums);
            tmpRes.remove(tmpRes.size() - 1);
            while(i < nums.length - 1 && nums[i + 1] == nums[i]){i ++;}
        }
    }
}
