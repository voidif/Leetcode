class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix.length == 0){
            return 0;
        }
        int[][] record = new int[matrix.length][matrix[0].length];
        int max = 0;
        for(int i = 0; i < matrix.length; i ++){
            for(int j = 0; j < matrix[0].length; j ++){
                if(record[i][j] == 0){
                    max = Math.max(max, dps(matrix, record, i, j));
                }
            }
        }
        return max;
    }
    
    public int dps(int[][] matrix, int[][] record, int i, int j){
        int max = 1;
        if(i - 1 >= 0 && matrix[i - 1][j] <  matrix[i][j]){
            if(record[i - 1][j] != 0){
                max = Math.max(max, record[i - 1][j] + 1);
            } else {
                max = Math.max(max, dps(matrix, record, i - 1, j) + 1);
            }
        }
        if(i + 1 < matrix.length && matrix[i + 1][j] <  matrix[i][j]){
            if(record[i + 1][j] != 0){
                max = Math.max(max, record[i + 1][j] + 1);
            } else {
                max = Math.max(max, dps(matrix, record, i + 1, j) + 1);
            }
        }
        if(j - 1 >= 0 && matrix[i][j - 1] <  matrix[i][j]){
            if(record[i][j - 1] != 0){
                max = Math.max(max, record[i][j - 1] + 1);
            } else {
                max = Math.max(max, dps(matrix, record, i, j - 1) + 1);
            }
        }
        if(j + 1 < matrix[0].length && matrix[i][j + 1] <  matrix[i][j]){
            if(record[i][j + 1] != 0){
                max = Math.max(max, record[i][j + 1] + 1);
            } else {
                max = Math.max(max, dps(matrix, record, i, j + 1) + 1);
            }
        }
        record[i][j] = max;
        //System.out.println(i + " " + j + " " + max);
        return max;
    }
}
