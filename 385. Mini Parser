/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    public NestedInteger deserialize(String s) {
        if(s.length() == 2 && s.charAt(0) == '['){
            return new NestedInteger();
        }
        if(s.charAt(0) == '['){
            // if(s.charAt(1) != '['){
            //     return deserialize(s.substring(1, s.length() - 1));
            // }
            boolean outer;
            int stack = 0;
            int i = 0;
            boolean hasComma = false;
            for(; i < s.length(); i ++){
                if(s.charAt(i) == ',' && stack == 1){
                    hasComma = true;
                }
                if(s.charAt(i) == '['){
                    stack ++;
                }
                if(s.charAt(i) == ']'){
                    stack --;
                    if(stack == 0){
                        break;
                    }
                }
            }
            if(i == s.length() - 1){
                if(hasComma){
                    return deserialize(s.substring(1, s.length() - 1));
                }
                NestedInteger res = new NestedInteger();
                res.add(deserialize(s.substring(1, s.length() - 1)));
                return res;
            }
        }
        List<String> data = helper(s);
        if(data.size() == 1){
            return new NestedInteger(Integer.parseInt(data.get(0)));
        } else {
            NestedInteger res = new NestedInteger();
            for(String tmp : data){
                //System.out.println(tmp);
                res.add(deserialize(tmp));
            }
            return res;
        }
        
        // int first = 0;
        // for(int i = 0; i < s.length(); i ++){
        //     if(s.charAt(i) == ',' && i > first){
        //         res.add(new NestedInteger(Integer.parseInt(s.substring(first, i))));
        //         res.add(deserialize(s.substring(i + 1, s.length())));
        //     } else if(s.charAt(i) == '['){
        //         res.add(deserialize(s.substring(i + 1, s.length() - 1)));
        //     }
        // }
        // return res;
    }
    
    List<String> helper(String s){
        int stack = 0;
        int index  = 0;
        List<String> res = new ArrayList<>();
        for(int i = 0; i < s.length(); i ++){
            if(s.charAt(i) == '['){
                stack ++;
            }
            if(s.charAt(i) == ']'){
                stack --;
            }
            if(s.charAt(i) == ',' && stack == 0){
                res.add(s.substring(index, i));
                index = i + 1;
            }
        }
        res.add(s.substring(index, s.length()));
        return res;
    }
}
