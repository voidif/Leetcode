/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {

    private List<Integer> data;
    private ListIterator<Integer> iter;
    
    private List<Integer> extract(NestedInteger in){
        if(in == null){
            return null;
        }
        if(in.isInteger()){
            return new ArrayList<Integer>(){{add(in.getInteger());}};
        } 
        List<Integer> res = new ArrayList<>();
        for(NestedInteger tmp : in.getList()){
            res.addAll(extract(tmp));
        }
        return res;
    }
        
    public NestedIterator(List<NestedInteger> nestedList) {
        data = new ArrayList<>();
        for(NestedInteger tmp : nestedList){
            data.addAll(extract(tmp));
        }
        iter = data.listIterator();
    }

    @Override
    public Integer next() {
        return iter.next();
    }

    @Override
    public boolean hasNext() {
        return iter.hasNext();
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
