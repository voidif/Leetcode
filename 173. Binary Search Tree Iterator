/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {

    private Stack<TreeNode> stack;
    private TreeNode currentNode;
    
    public BSTIterator(TreeNode root) {
        stack = new Stack<>();
        if(root == null){
            return;
        }
        currentNode = root;
        stack.push(root);
        while(currentNode.left != null){
            stack.push(currentNode.left);
            currentNode = currentNode.left;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(!stack.isEmpty()){
            return true;
        } else {
            return false;
        }
    }

    /** @return the next smallest number */
    public int next() {
        if(stack.isEmpty()){
            return -1;
        }
        int res = currentNode.val;
        stack.pop();
        if(currentNode.right != null){
            currentNode = currentNode.right;
            stack.push(currentNode);
            while(currentNode.left != null){
                stack.push(currentNode.left);
                currentNode = currentNode.left;
            }
        } else {
            currentNode = stack.isEmpty() ? null : stack.peek();
        }
        return res;
        
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
