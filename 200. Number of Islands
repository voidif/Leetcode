class Solution {
    public int numIslands(char[][] grid) {
        if(grid.length == 0){
            return 0;
        }
        int[][] data = new int[grid.length][grid[0].length];
        int num = 1;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j ++){
                if(grid[i][j] == '1' && data[i][j] == 0){
                    markIsland(grid, data, num, i, j);
                    num ++;
                }
            }
        }
        return num - 1;
    }
    
    public void markIsland(char[][] grid, int[][] data, int num, int x, int y){
        if(x > 0 && data[x - 1][y] == 0 && grid[x - 1][y] == '1'){
            data[x - 1][y] = num;
            markIsland(grid, data, num, x - 1, y);
        }
        if(x < grid.length - 1 && data[x + 1][y] == 0 && grid[x + 1][y] == '1'){
            data[x + 1][y] = num;
            markIsland(grid, data, num, x + 1, y);
        }
        if(y > 0 && data[x][y - 1] == 0 && grid[x][y - 1] == '1'){
            data[x][y - 1] = num;
            markIsland(grid, data, num, x, y - 1);
        }
        if(y < grid[0].length - 1 && data[x][y + 1] == 0 && grid[x][y + 1] == '1'){
            data[x][y + 1] = num;
            markIsland(grid, data, num, x, y + 1);
        }
    }
}
