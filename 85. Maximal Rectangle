class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0){
            return 0;
        }
        int[] barList = new int[matrix[0].length];
        int maxArea = 0;
        for(int i = 0; i < matrix.length; i ++){
            for(int j = 0; j < matrix[0].length; j ++){
                if(matrix[i][j] == '0'){
                    barList[j] = 0;
                } else {
                    barList[j] ++;
                }
            }
            maxArea = Math.max(maxArea, largestRectangleArea(barList));
        }
        return maxArea;
    }
    
    public int largestRectangleArea(int[] heights) {
        //stack storage index, for every index, the correspond height is increasing at any time
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        //add 0 height to end
        for(int i = 0; i <= heights.length; i ++){
            int currentHeight = (i == heights.length ? 0 : heights[i]);
            while(!stack.isEmpty() && heights[stack.peek()] > currentHeight){
                int newPrevHighest = heights[stack.pop()];
                int areaLeftBorder = (stack.isEmpty() ? -1 : stack.peek());
                maxArea = Math.max(maxArea, (i - areaLeftBorder - 1) * newPrevHighest);
            }
            stack.push(i);
        }
        return maxArea;
    }
}
