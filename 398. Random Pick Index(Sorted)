import java.util.concurrent.ThreadLocalRandom;

class Solution {
    private TreeNode treeRoot;
    
    public Solution(int[] nums) {
        Arrays.sort(nums);
        treeRoot = buildTree(nums, 0, nums.length - 1);
        
    }
    
    public int pick(int target) {
        TreeNode cur = treeRoot;
        while(cur != null){
            if(cur.val == target){
                return ThreadLocalRandom.current().nextInt(cur.index, cur.index + cur.dup);
            }
            if(cur.val < target){
                cur = cur.right;
                continue;
            } else {
                cur = cur.left;
                continue;
            }
        }
        return 0;
    }
    
    private TreeNode buildTree(int[] nums, int begin, int end){
        if(begin > end){
            return null;
        }
        if(begin == end){return new TreeNode(nums[begin], 1, begin);}
        
        TreeNode root = new TreeNode(0, 0, 0);
        int mid = (begin + end) / 2;
        int leftEnd = mid;
        root.set(nums[mid], 1, mid);
        int count = 1;
        if(nums[mid] == -760627172){
            System.out.println(mid);
        }
        while(leftEnd - 1 >= begin && nums[leftEnd - 1] == nums[leftEnd]){
            count ++;
            leftEnd --;
        }
        int rightEnd = mid;
        while(rightEnd + 1 <= end && nums[rightEnd + 1] == nums[rightEnd]){
            count ++;
            rightEnd ++;
        }
        root.set(nums[mid], leftEnd, count);
        root.left = buildTree(nums, begin, leftEnd - 1);
        root.right = buildTree(nums, rightEnd + 1, end);
        return root;
    }
}

class TreeNode{
    int val;
    int dup;
    int index;
    TreeNode left;
    TreeNode right;
    public TreeNode(int val, int dup, int index){
        this.val = val;
        this.dup = dup;
        this.index = index;
    }
    public void set(int val, int dup, int index){
        this.val = val;
        this.dup = dup;
        this.index = index;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int param_1 = obj.pick(target);
 */
