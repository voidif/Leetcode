/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    //divide interval to start and ends, using stack, just like gather water problem
    //time o nlogn space on
    public int minMeetingRooms(Interval[] intervals) {
        int n = intervals.length;
        int[] starts = new int[n];
        int[] ends = new int[n];
        for(int i = 0; i < n; i ++) {
            starts[i] = intervals[i].start;
            ends[i] = intervals[i].end;
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        int stack = 0;
        int start = 0;
        int end = 0;
        int res = 0;
        while(start < n) {
            if(starts[start] < ends[end]) {
                stack ++;
                res = Math.max(res, stack);
                start ++;
            } else {
                stack --;
                end ++;
            }
        }
        return res;
    }
}
