/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size() == 0){
            return new ArrayList();
        }
        Collections.sort(intervals, new Comparator<Interval>(){
            @Override
            public int compare(Interval a, Interval b){
                return a.start - b.start;
            }
        });
        List<Interval> res = new ArrayList<>();
        Interval first = intervals.get(0);
        int start = first.start;
        int end = first.end;
        ListIterator<Interval> iter = intervals.listIterator();
        iter.next();
        while(iter.hasNext()){
            Interval tmp = iter.next();
            if(tmp.start <= end){
                end = Math.max(end, tmp.end);
            } else {
                res.add(new Interval(start, end));
                start = tmp.start;
                end = tmp.end;
            }
        }
        res.add(new Interval(start, end));
        return res;
    }
}
