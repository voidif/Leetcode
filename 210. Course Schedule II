//find a topologic sort in a DAG
class Solution {
    private Map<Integer, ArrayList<Integer>> map;
    private int[] nodeCount;
    private int[] res;
    private int curIndex;
    
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if(numCourses <= 0){
            return new int[0];
        }
        map = new HashMap<>();
        nodeCount = new int[numCourses];
        res = new int[numCourses];
        curIndex = 0;
        for(int i = 0; i < prerequisites.length; i++){
            ArrayList<Integer> tmp = map.getOrDefault(prerequisites[i][1], new ArrayList<Integer>());
            tmp.add(prerequisites[i][0]);
            map.put(prerequisites[i][1], tmp);
            nodeCount[prerequisites[i][0]] ++;
        }
        //System.out.println(map.size());
        int index = findZero();
        while(index != -1){
            for(int tmp : map.getOrDefault(index, new ArrayList<Integer>())){
                nodeCount[tmp] --;
            }
            nodeCount[index] = -1;
            res[curIndex] = index;
            curIndex ++;
            index = findZero();
        }
        if(curIndex == numCourses){
            return res;
        } else {
            return new int[0];
        }
    }
    
    public int findZero(){
        for(int i = 0; i < nodeCount.length; i ++){
            if(nodeCount[i] == 0){
                return i;
            }
        }
        return -1;
    }
    
}

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        //first step, set graph
        //queue to storage empty indegree node
        Queue<Integer> avaliableCourses = new LinkedList<>();
        Map<Integer, Integer> InDegreeMap = new HashMap<>();
        Map<Integer, Set<Integer>> childrenMap = new HashMap<>();
        
        for(int[] edge : prerequisites) {
            Set<Integer> child = childrenMap.getOrDefault(edge[1], new HashSet<Integer>());
            child.add(edge[0]);
            childrenMap.putIfAbsent(edge[1], child);
            
            InDegreeMap.put(edge[0], InDegreeMap.getOrDefault(edge[0], 0) + 1);
        }
        for(int i = 0; i < numCourses; i ++) {
            if(! InDegreeMap.containsKey(i)) {
                avaliableCourses.add(i);
            }
        }
        
        int[] result = new int[numCourses];
        int index = 0;
        //step 2, looping
        while(avaliableCourses.size() != 0) {
            int currentCourse = avaliableCourses.remove();
            result[index] = currentCourse;
            index ++;
            
            Set<Integer> childrenCourses = childrenMap.getOrDefault(currentCourse, new HashSet<Integer>());
            for(int childCourse : childrenCourses) {
                int remainingPre = InDegreeMap.get(childCourse) - 1;
                InDegreeMap.put(childCourse, remainingPre);
                if(remainingPre == 0) {
                    avaliableCourses.add(childCourse);
                }
            }
        }
        return index == numCourses ? result : new int[0];
        
        
    }
}
