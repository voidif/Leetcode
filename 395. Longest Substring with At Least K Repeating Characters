class Solution {
    public int longestSubstring(String s, int k) {
        return helper(s.toCharArray(), 0, s.length() - 1, k);
    }
    
    public int helper(char[] charList, int begin, int end, int k){
        if(end - begin + 1 < k){
            return 0;
        }
        int max = - 1;
        int[] data = new int[26];
        for(int i = begin; i <= end; i ++){
            data[charList[i] - 'a'] ++;
        }
        int subBegin = 0;
        boolean cut = false;
        for(int i = begin; i <= end; i ++){
            if(data[charList[i] - 'a'] < k){
                max = Math.max(max, helper(charList, subBegin , i - 1, k));
                subBegin = i + 1;
                cut = true;
            }
        }
        if(!cut){
            return end - begin + 1;
        }
        if(subBegin <= end){
            max = Math.max(max, helper(charList, subBegin , end, k));
        }
        return max;
    }
}
