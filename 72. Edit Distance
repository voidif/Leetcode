class Solution {
    public int minDistance(String word1, String word2) {
        if(word1 == null){
            return word2 == null ? 0 : word2.length();
        } else if(word2 == null){
            return word1.length();
        }
        char[] char1 = word1.toCharArray();
        char[] char2 = word2.toCharArray();
        int[][] table = new int[char1.length + 1][char2.length + 1];
        for(int i = 0; i <= char1.length; i ++){
            table[i][0] = i;
        }
        for(int i = 0; i <= char2.length; i ++){
            table[0][i] = i;
        }
        for(int i = 1; i <= char1.length; i ++){
            for(int j = 1; j <= char2.length; j ++){
                if(char1[i - 1] == char2[j - 1]){
                    table[i][j] = table[i - 1][j - 1];
                } else {
                    table[i][j] = Math.min(Math.min(table[i - 1][j], table[i][j - 1]), table[i - 1][j - 1]) + 1;
                }
            }
        }
        return table[char1.length][char2.length];
    }
}


//
class Solution {
    //dp
    //define optimal match: match with min distance
    //acbb and abb
    //acbb
    //a-bb, distance is 1
    
    //for s1 0 - m, s2 0 - n
    //there must be one of following three situations if
    //1. m is match n in optimal match, + 1 distance if char(m) != char(n)
    //2. m is not match
    //3. n is not match
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        //dp[i][j] represent the min distance between sub[0, i - 1] sub[0, j - 1]
        int[][] dp = new int[m + 1][n + 1];
        
        //fill first row
        for(int i = 0; i < n + 1; i ++) {
            dp[0][i] = i;
        }
        //fill first column
        for(int i = 0; i < m + 1; i ++) {
            dp[i][0] = i;
        }
        //fill one line by one line
        for(int i = 1; i < m + 1; i ++) {
            for(int j = 1; j < n + 1; j ++) {
                int equalDist = word1.charAt(i - 1) == word2.charAt(j - 1) ? 0 : 1;
                //case 1, 2, 3
                int dist1 = dp[i - 1][j - 1] + equalDist;
                int dist2 = dp[i - 1][j] + 1;
                int dist3 = dp[i][j - 1] + 1;
                dp[i][j] = Math.min(Math.min(dist1, dist2), dist3);
            }
        }
        return dp[m][n];
        
        
    }
}
