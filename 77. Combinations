class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> tmpRes = new ArrayList<Integer>();
        backtracking(res, tmpRes, 1, k, n);
        return res;
    }
    
    public void backtracking(List<List<Integer>> res, List<Integer> tmpRes, int begin, int curCount, int maxNum){
        if(curCount == 0){
            res.add(new ArrayList(tmpRes));
            return;
        }
        for(int i = begin; i <= maxNum - curCount + 1; i ++){
            tmpRes.add(i);
            backtracking(res, tmpRes, i + 1, curCount - 1, maxNum);
            tmpRes.remove(tmpRes.size() - 1);
        }
    }
}
