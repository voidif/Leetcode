class Solution {
    public int subarraySum(int[] nums, int k) {
        int[] prefixSum = getPrefixSum(nums);
        HashMap<Integer, List<Integer>> prefixSumToIndex = new HashMap<>();
        //add zero sum
        LinkedList<Integer> zeroSumList = new LinkedList<>();
        zeroSumList.add(-1);
        prefixSumToIndex.put(0, zeroSumList);
        int targetCount = 0;
        for (int i = 0; i < prefixSum.length; i++) {
            int pairNum = prefixSum[i] - k;
            targetCount += prefixSumToIndex.getOrDefault(pairNum, new LinkedList<>()).size();
            List<Integer> prefixSumToIndexList = prefixSumToIndex.getOrDefault(prefixSum[i], new LinkedList<>());
            prefixSumToIndexList.add(i);
            prefixSumToIndex.putIfAbsent(prefixSum[i], prefixSumToIndexList);
        }
        return targetCount;
    }
    
    private int[] getPrefixSum(int[] nums) {
        int[] prefixSum = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            int prefix = i > 0 ? prefixSum[i - 1] : 0;
            prefixSum[i] = prefix + nums[i];
        }
        return prefixSum;
    }
}
