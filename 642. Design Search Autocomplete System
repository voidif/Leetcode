class AutocompleteSystem {
  private Trie trie;
  private TrieNode currentNode;
  private StringBuilder currentSentence;

  public AutocompleteSystem(String[] sentences, int[] times) {
    trie = new Trie();
    for (int i = 0; i < sentences.length; i++) {
      trie.insertWithTime(sentences[i], times[i]);
    }
    currentNode = trie.root;
    currentSentence = new StringBuilder();
  }
    
  public List<String> input(char c) {
    ArrayList<String> result = new ArrayList<>();
    if (c == '#') {
      trie.insertWithTime(currentSentence.toString(), 1);
      currentNode = trie.root;
      currentSentence.setLength(0);
      return result;
    } else {
      currentNode = currentNode.getChild(c);
      currentSentence.append(c);
      return currentNode.getTopK(3);
    }
  }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */

class TrieNode {
  TrieNode[] children = new TrieNode[128];
  HashMap<String, Integer> stringCount = new HashMap<>();
  
  public void insertWithTime(String sentence, int time, int index) {
    stringCount.put(sentence, stringCount.getOrDefault(sentence, 0) + time);
    if (index == sentence.length()) {
      return;
    } else {
      char insertChar = sentence.charAt(index);
      if (children[insertChar] == null) {
        children[insertChar] = new TrieNode();
      }
      children[insertChar].insertWithTime(sentence, time, index + 1);
    }
  }
  
  public TrieNode getChild(char nextChar) {
    if (children[nextChar] == null) {
      children[nextChar] = new TrieNode();
    }
    return children[nextChar];
  }
  
  public List<String> getTopK(int k) {
    PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<>(k, (Map.Entry<String, Integer> a, Map.Entry<String, Integer> b) -> {
      if (a.getValue().equals(b.getValue())) {
        return b.getKey().compareTo(a.getKey());
      } else {
        return a.getValue() - b.getValue();
      }
    });
    for (Map.Entry<String, Integer> entry : stringCount.entrySet()) {
      pq.add(entry);
      // System.out.println(entry.getKey() + " " + entry.getValue());
      if (pq.size() > k) {
        pq.poll();
      }
    }
    // System.out.println(stringCount.size());
    LinkedList<String> result = new LinkedList<>();
    while(!pq.isEmpty()) {
      result.addFirst(pq.poll().getKey());
    }
    return result;
  }
}

class Trie {
  TrieNode root = new TrieNode();
  
  public void insertWithTime(String sentence, int time) {
    root.insertWithTime(sentence, time, 0);
  }
}
